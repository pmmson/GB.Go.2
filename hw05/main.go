/*
1. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç ùëõ –ø–æ—Ç–æ–∫–æ–≤ –∏ –¥–æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Ö –≤—Å–µ—Ö
2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º—å—é—Ç–µ–∫—Å–∞ —Å –ø–æ–º–æ—â—å—é defer
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ
	–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è sync.Mutex –∏ sync.RWMutex
	–¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: 10% –∑–∞–ø–∏—Å—å, 90% —á—Ç–µ–Ω–∏–µ; 50% –∑–∞–ø–∏—Å—å, 50% —á—Ç–µ–Ω–∏–µ; 90% –∑–∞–ø–∏—Å—å, 10% —á—Ç–µ–Ω–∏–µ
*/
package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

func main() {
	fmt.Println("–ó–∞–¥–∞–Ω–∏–µ 1")
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ n (–¥–ª–∏–Ω—É —Å–ª—É—á–∞–π–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏): ")
	var n int
	fmt.Scan(&n)
	genStr := randStr(n)
	fmt.Println(genStr, "| –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏:", len(genStr))

	fmt.Println("–ó–∞–¥–∞–Ω–∏–µ 2")
	var statRunesInStr = make(map[rune]int)
	var mux sync.Mutex
	var wg sync.WaitGroup
	for _, v := range genStr {
		wg.Add(1)
		go func(r rune) {
			mux.Lock()
			defer mux.Unlock()
			statRunesInStr[r]++
			wg.Done()
		}(v)
	}
	wg.Wait()
	var sum int
	for key, i := range statRunesInStr /*statRunesInStr*/ {
		sum += i
		fmt.Printf("%s - %d; ", string(key), i)
	}
	fmt.Println("\n–í—Å–µ–≥–æ rune –≤ —Å—É–º–º–µ:", sum)

	fmt.Println("–ó–∞–¥–∞–Ω–∏–µ 3")

}

var letters = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")

func randStr(n int) string {
	b := make([]rune, n)
	var wg = sync.WaitGroup{}
	for i := range b {
		wg.Add(1)
		go func() {
			defer wg.Done()
			rand.Seed(time.Now().UnixMicro())
			b[i] = letters[rand.Intn(len(letters))]
		}()
		wg.Wait()
	}
	return string(b)
}
